input {
  beats {
    port => 5044
  }
}

filter {
    if [type] == "nginx-access" {
        grok {
            match => {
                "message" => "%{IPORHOST:clientip} - - \[%{HTTPDATE:request_time}\] \"(?:%{WORD:method} %{URIPATH:url}(?:%{URIPARAM:params})?(?: HTTP/%{NUMBER:httpversion})?|%{DATA:rawrequest})\" %{NUMBER:response} (?:%{NUMBER:bytes:int}|-) \"%{DATA:referrer}\" \"%{DATA:agent}\""
            }
        }

        date {
            match => [ "request_time" , "dd/MMM/yyyy:HH:mm:ss +0000" ]
            timezone => "UTC"
        }

        kv {
            source => "params"
            field_split => "&"
            trim_key => "\?"
            prefix => "arg_"
        }

        ruby {
            code => "
                def distance point1, point2
                    loc1 = point1.split(/\s|%2C|\,/).map { |i| i.to_f }.reverse
                    loc2 = point2.split(/\s|%2C|\,/).map { |i| i.to_f }.reverse
                    rad_per_deg = Math::PI/180  # PI / 180
                    rkm = 6371                  # Earth radius in kilometers
                    rm = rkm * 1000             # Radius in meters

                    dlat_rad = (loc2[0]-loc1[0]) * rad_per_deg  # Delta, converted to rad
                    dlon_rad = (loc2[1]-loc1[1]) * rad_per_deg

                    lat1_rad, lon1_rad = loc1.map { |i| i * rad_per_deg }
                    lat2_rad, lon2_rad = loc2.map { |i| i * rad_per_deg }

                    a = Math.sin(dlat_rad / 2)**2 + Math.cos(lat1_rad) *
                        Math.sin(dlon_rad / 2)**2 * Math.cos(lat2_rad)
                    c = 2 * Math::atan2(Math::sqrt(a), Math::sqrt(1-a))

                    rm * c # Delta in meters
                end
                arg_coordinates = event.get('arg_coordinates')
                if arg_coordinates != nil and arg_coordinates != ''
                    coords = arg_coordinates.split(/\s|%7C|\|/)
                    if coords.length > 1
                        event.set('estimated_dist', coords[1..-1].zip(coords[0..-2]).map { |p1,p2| distance(p1,p2) }.inject(0.0, &:+))
                    end
                end
            "
        }

        geoip {
            source => "clientip"
        }
    }

    if [type] == "nginx-error" {
        grok {
            match => {
                "message" => "(?<timestamp>%{YEAR}[./]%{MONTHNUM}[./]%{MONTHDAY} %{TIME}) \[%{LOGLEVEL:severity}\] %{POSINT:pid}#%{NUMBER:threadid}\: \*%{NUMBER:connectionid} %{GREEDYDATA:errormessage}, client: %{IP:clientip}, server: %{GREEDYDATA:server}, request: \"(?<httprequest>%{WORD:httpcommand} %{UNIXPATH:httpfile} HTTP/(?<httpversion>[0-9.]*))\"(, )?(upstream: \"(?<upstream>[^,]*)\")?(, )?(host: \"(?<host>[^,]*)\")?"
            }
        }

        geoip {
            source => "clientip"
        }
    }
}


output {
  elasticsearch {
    hosts => "192.168.2.19:9200"
    manage_template => false
    index => "logstash-gateway-%{[@metadata][beat]}-%{+YYYY.MM.dd}"
    document_type => "%{[@metadata][type]}"
  }
}
